@name The Big E's Configurable Holo-Base V0.55
@inputs Base:entity
@outputs WheelRotation Values:array
@persist WheelRotation Diameter SpeedMultiplier Scale PMoveR PWidth Radius PMoveL PRMul PistonAngle PRAngR PRAngL PRAngUp PRAngSide Spin
@trigger 
if(first()|dupefinished()|duped()){

BaseAngle=ang(0,0,0)    #Used if the base block/bogey has a rotated center. Rotates the entire wheelbase about the main Drive axle.
BaseOffset=vec(-25,0,-11)   #Adjusts how far from the center of the base block the wheelbase will be. Will be used to make sure the wheels are touching the track.
Diameter=33     #in inches, range of 21 to 110, although 99-104 may not work. Does not have to be multiples of six!
Radius=10   #The Distance from the center of the wheel the rods will be. Will also adjust rod attachment points.
Faxles=1    #Number of axles in front of the main drive axle. Maximum 3!
Faxle1=0    #Offset in inches for each Front axle. Will move each front axle forward or backward independently, relative to the Axle Spacing.
Faxle2=0
Faxle3=0
Raxles=0   #Number of axles behind the main drive axle. Maximum 3!
Raxle1=0    #Offset in inches for each Rear axle. Will move each rear axle forward or backward independently, relative to the Axle Spacing.
Raxle2=0
Raxle3=0
AxleSpacing=50    #How far apart the wheels will be from center-to-center by default.
Gauge=32    #Gauge of the track this will run on in Playerscale inches.  Reference: 1 foot = 12 inches. If the wheels do not align with the track width you specified, check to make sure the general scale multiplier is equal to 1.
WheelMat1="icegt/loco/ice_trainmetal_black"     #Materials used for the wheel.
WheelMat2=""
WheelMat3=""
WheelMat4="icegt/loco/ice_trainmetal_black"     #WheelMat4 is also the material that will be used on the rod attachment points.
WheelMat5="icegt/loco/ice_trainmetal_black"
WheelColor=vec(255)   #Changes the color of the wheels. 
RodMat="models/proppertextures/aluminum"
RadMat2=""
MWidth=20.5    #This changes how far from the center of the wheelbase the Main Side Rods will be.
PRWidth=24.5    #This changes how far from the center of the wheelbase the Piston Rods will be.
PWidth=26.5
WheelType=2 #Changes the type of spokes the wheel has.
Counterweight=2 #Changes the counterweight bodygroup.
Scale=1         #Overall Scale multiplier. Makes the entire base larger or smaller. Not recommended for uses beyond G-gauge.
SpeedMultiplier=5.8 #May have to be changed from server-to-server.
PistonHeight=0      #How far up the pistons are compared to the center of the axle. Is usually 0.
PistonForward=72    #How far forward the pistons are compared to the main drive axle.
PistonAngle=0       #How far up the pistons will be angled. Depending on how far up they're angled you may need to change the PRMul.
PRMul=1.25       #Multiplier for the the piston rod angle. Will need to be changed if the PistonForward distance is changed. The farther forward the piston, the higher the PRMul.
RodMul=0.7       #Multiplier for how thick the rods are.
PistonMul=0.85         #Multiplier for how big the pistons are.
PRodLength=70       #How Long the Piston Rods are, usually will be the same as PistonForward.
PRAngUp=0        #How far up the the piston rods will point.
PRAngSide=1.5       #How far out to the side the piston rods will point.
Spin=18             #Used to make the wheels spin while the base is being worked on. For whatever reason, valve gear may bug out if the number is even.
####################################################################################################################################################################################################################################################################################################################################################################################################################################
D=(round(Diameter/6))*6
PistonPos=vec(PistonForward*Scale,0,PistonHeight*Scale)
PistonAng=ang(-PistonAngle,0,0)
if(Faxles){}






#Base holo. Use this to change the overall position of the wheelbase.
A=1
holoCreate(A)
holoParent(A, Base)
holoAng(A, Base:toWorld(BaseAngle))
holoPos(A,Base:toWorld(vec(0,0,((Diameter/2)-12))+BaseOffset))
holoScale(A, vec(0))  
#Main Drive Axle. All the rods are attached to this one.    
A=2
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight+1)    
A=3
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=4
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)    
#1st Front Axle.
if(Faxles>0){
A=5
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec((AxleSpacing+Faxle1)*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=6
B=holoEntity(5)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=7
B=holoEntity(5)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
#2nd Front Axle.
if(Faxles>1){
A=8
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=9
B=holoEntity(8)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=10
B=holoEntity(8)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
#3rd Front Axle.
if(Faxles>2){
A=11
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(AxleSpacing*3*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=12
B=holoEntity(11)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=13
B=holoEntity(11)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
#1st Rear Axle.
if(Raxles>0){
A=14
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(-AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=15
B=holoEntity(14)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=16
B=holoEntity(14)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
#2nd Rear Axle.
if(Raxles>1){
A=17
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(-AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=18
B=holoEntity(17)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=19
B=holoEntity(17)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
#3rd Rear Axle.
if(Raxles>2){
A=20
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/wheels/standard/double_"+D+".mdl")
holoEntity(A):setSubMaterial(1,WheelMat1)
holoEntity(A):setSubMaterial(2,WheelMat2)
holoEntity(A):setSubMaterial(3,WheelMat3)
holoEntity(A):setSubMaterial(4,WheelMat4)
holoEntity(A):setSubMaterial(5,WheelMat5)
holoPos(A,B:toWorld(vec(-AxleSpacing*3*Scale,0*Scale,0*Scale)))
holoScale(A, vec((Diameter/D)*Scale,(Gauge/56)*Scale,(Diameter/D)*Scale))
holoColor(A,WheelColor)   
holoBodygroup(A,2,WheelType)    
holoBodygroup(A,3,Counterweight)    
A=21
B=holoEntity(20)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(180,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)   
A=22
B=holoEntity(20)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(-90,0,0)) )
holoModel(A, "models/sprops/mechanics/misc/cam_b1.mdl")
holoMaterial(A,WheelMat4)
holoPos(A,B:toWorld(vec(0*Scale,-29.25*(Gauge/56)*Scale,0*Scale)))
holoScale(A, vec((Radius)*0.16*Scale,(Gauge/56)*1.95*Scale,(Radius)*0.16*Scale))
holoColor(A,WheelColor)
}
###################################################
#Main Rod Parent Right.
A=23
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(-Radius*Scale,-MWidth*Scale,0*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
#Main Rod Parent Left
A=24
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(0*Scale,MWidth*Scale,-Radius*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
##############################################
#Piston Rod Parent Right
A=25
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(-Radius*Scale,-PRWidth*Scale,0*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
#Piston Rod Parent Left
A=26
B=holoEntity(2)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(0*Scale,PRWidth*Scale,-Radius*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
#################################################
#Piston Main Parent
A=27
B=holoEntity(1)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(PistonAng) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(PistonPos))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
#Piston Right Parent
A=28
B=holoEntity(27)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(0*Scale,-PWidth*Scale,0*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
#Piston Left Parent
A=29
B=holoEntity(27)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "")
holoMaterial(A,"")
holoPos(A,B:toWorld(vec(0*Scale,PWidth*Scale,0*Scale)))
holoScale(A, vec(0*Scale))
holoColor(A,vec(255))
########################################################################################
if((Raxles|Faxles)>0){
#Main Rod Right Detailing
A=30
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_256.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(((Raxles-Faxles)/-2)*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(0.0039*(Raxles+Faxles)*AxleSpacing*Scale,RodMul*Scale,RodMul*Scale))
holoColor(A,vec(255))
A=31
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,180,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-Raxles*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=32
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(Faxles*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
#Main Rod Left Detailing
A=33
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_256.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(((Raxles-Faxles)/-2)*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(0.0039*(Raxles+Faxles)*AxleSpacing*Scale,RodMul*Scale,RodMul*Scale))
holoColor(A,vec(255))
A=34
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,180,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-Raxles*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=35
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(Faxles*AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}
#Piston Rod Right
A=36
B=holoEntity(25)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,180,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=37
B=holoEntity(25)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_128.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(PRodLength/2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(PRodLength/128*Scale,RodMul*Scale,RodMul*Scale))
holoColor(A,vec(255))
#Piston Rod Left
A=38
B=holoEntity(26)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,180,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_end.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=39
B=holoEntity(26)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_128.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(PRodLength/2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(PRodLength/128*Scale,RodMul*Scale,RodMul*Scale))
holoColor(A,vec(255))
#Piston Right
A=40
B=holoEntity(28)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains/uk/peckett/w6/piston.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(PistonMul*Scale))
holoColor(A,vec(255))
holoClip(A,1,vec(35,0,0),vec(-1,0,0),0)
holoClipEnabled(A,1,1)
#Piston Left
A=41
B=holoEntity(29)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains/uk/peckett/w6/piston.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(PistonMul*Scale))
holoColor(A,vec(255))
holoClip(A,1,vec(35,0,0),vec(-1,0,0),0)
holoClipEnabled(A,1,1)
#Rod Connection Points
if((Raxles&Faxles)>0){
A=42
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=43
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(0*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}
if(Raxles>1){
A=44
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=45
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}
if(Raxles>2){
A=46
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=47
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(-AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}
if(Faxles>1){
A=48
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=49
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(AxleSpacing*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}
if(Faxles>2){
A=50
B=holoEntity(23)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
A=51
B=holoEntity(24)
holoCreate(A)
holoParent(A, B)
holoAng(A, B:toWorld(ang(0,0,0)) )
holoModel(A, "models/bobsters_trains_2/modular_rod/rod_center.mdl")
holoMaterial(A,RodMat)
holoPos(A,B:toWorld(vec(AxleSpacing*2*Scale,0*Scale,0*Scale)))
holoScale(A, vec(RodMul*Scale))
holoColor(A,vec(255))
}



















function void updateRods(Speed:number){
WheelRotation += Speed * 1
if(WheelRotation > 360) {WheelRotation = WheelRotation - 360}
elseif(WheelRotation < -360) {WheelRotation = WheelRotation + 360}

PMoveR=-cos(WheelRotation)*Radius
PMoveL=-sin(WheelRotation)*Radius
PRAngL=-cos(WheelRotation+PistonAngle)*Radius
PRAngR=-sin(WheelRotation+PistonAngle)*Radius

B=holoEntity(1)
holoAng(2, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(5, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(8, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(11, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(14, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(17, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(20, B:toWorld(ang(WheelRotation,0,0)) )
holoAng(23, B:toWorld(ang(0,0,0)) )
holoAng(24, B:toWorld(ang(0,0,0)) )
holoAng(25, B:toWorld(ang((-PRAngR/PRMul)-PRAngUp,-PRAngSide,0)) )
holoAng(26, B:toWorld(ang((PRAngL/PRMul)-PRAngUp,PRAngSide,0)) )
holoPos(28,holoEntity(27):toWorld(vec(PMoveR*Scale,-PWidth*Scale,0*Scale)))
holoPos(29,holoEntity(27):toWorld(vec(PMoveL*Scale,PWidth*Scale,0*Scale)))




}    
updateRods(0)
    
Values=array(PRWidth,PWidth,RodMat,holoEntity(2),PistonHeight,PistonForward,PistonAngle,Scale,Radius,holoEntity(1),holoEntity(28),holoEntity(29))    
    
    
    
    
    
    
    
    
    
    
    
    }

Speed = Spin+(Base:velL():x()/(SpeedMultiplier*(Diameter/30)))
updateRods(Speed)
interval(50)
